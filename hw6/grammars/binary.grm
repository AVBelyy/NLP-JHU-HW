Zero = "0";
One = "1";
Bit = Zero | One;
export First = Optimize[Zero Zero* Bit* One One One One?];
export Second = Optimize[Zero+ (Zero | One)* One{3,4}];
export Disagreements = Optimize[(First - Second) | (Second - First)];

export Triplets = Optimize[(Zero | One{2} One+)*];

# Accepts even-length strings of 1s
export Pillars = Optimize[(One One)*];

# All binary strings that are not even-length strings of 1s
export NotPillars = Bit* - Pillars;

# Binary strings where 1s only appear and odd amount of times
export Oddlets = Optimize[(Zero* One Zero* One Zero*)* Zero* One Zero* | Zero*];

export WFlip = Optimize[((Zero : One <2>) | (Zero : Zero <1>)) ( (Zero : Zero One <0.5>) | (One : Zero <0.4>) )+ (One <0.5>)];

# Weighted FST that has multiple paths for (Zero, One One)
export WeightedMultipath = ((Zero : One <0.01>) ("" : One <0.01>))| (("": One One <0.4>) (Zero : "" <0.5>));
export WeightedMultipathOpt = Optimize[WeightedMultipath];

# 6.c.iii
T = WeightedMultipath;
x = Zero;
y = One One;
T_out = Project[ T, 'output']; # erases input from T
xT_out = Project[ x @ T, 'output']; # erases input x from x @ T
Ty_in = Project[ T @ y, 'input']; # erases output y from T @ y
xTy = x @ T @ y;
exTye = ("":x) @ T @ (y:""); # erases input x & output y from x @ T @ y
export xT_out_opt = Optimize[xT_out];
export Ty_in_opt = Optimize[Ty_in];
export exTye_opt = Optimize[exTye];
