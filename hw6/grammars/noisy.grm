import 'byte.grm' as bytelib;        # load a simple grammar (.grm)
ByteSigma = (bytelib.kSpace | bytelib.kGraph);  # printable characters
ByteSigmaStar = Optimize[ByteSigma*];

export LM = LoadFst['entrain.fst'];  # load trigram language model (.fst)
vocab = SymbolTable['entrain.sym'];  # load model's symbol table (.sym)

## Q8.e/f
RandomChar = bytelib.kGraph <4.54>;
export RandomWord = Optimize[(RandomChar (RandomChar <0.1>)* ) <2.3>];
export SpellOOV = Optimize["<unk>".vocab : RandomWord];
##
export Test = Invert[SpellOOV];
Spell = Optimize[StringFile['entrain.alpha', vocab, byte]];
#Spell = StringFile['entrain.alpha', vocab, byte] | SpellOOV;
Spell_inv = Optimize[StringFile['entrain.alpha', byte, vocab]];

# YOU WILL FILL IN THE REST

export StripChars = CDRewrite[ByteSigmaStar:"", "[BOS]" ByteSigma+, "[EOS]", ByteSigmaStar, 'ltr', 'opt'];
export CompleteByte = Optimize[Invert[StripChars]];
export CompleteWord = CompleteByte @ Spell_inv @ LM @ Spell;

# Remove spaces from input
export DelSpaces = CDRewrite[bytelib.kSpace : "", "", "", ByteSigmaStar, 'ltr', 'obl'];

# Get most likely sentences from non-spaced words
export SpellText = Optimize[(Spell ("".vocab : " "))*];
export CompressSpacesAll = CDRewrite[" "+ : " ", "[BOS]" | bytelib.kGraph, bytelib.kGraph | "[EOS]", ByteSigmaStar, 'sim', 'obl'];
export CompressSpacesStart = CDRewrite[" ": "", "[BOS]", bytelib.kGraph | "[EOS]", ByteSigmaStar, 'sim', 'obl'];
export CompressSpaces = CompressSpacesAll @ CompressSpacesStart;

export Generate = LM @ SpellText @ DelSpaces;
export Decode = Invert[Generate] @ SpellText @ CompressSpaces;

## Q8.h
Sigma = bytelib.kBytes;
export Edit = (Sigma | ((""|Sigma) : (""|Sigma) <1> )*;
